<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace = "com.hj.s6.member.MemberDAO">

	<resultMap type="MemberVO" id="loginResult">
		<id column="id" property="id"/>
		<result column="pw" property="pw"/>
		<result column="name" property="name"/>
		<result column="email" property="email"/>
		<result column="phone" property="phone"/>
		<result column="age" property="age"/>
		<!-- 1개인 경우 1:1-->
		<association property="memberFileVO" javaType="MemberFileVO">
			<result column="fileName" property="fileName"/>
			<result column="oriName" property="oriName"/>
		</association>
	</resultMap>
	
	<sql id="search">
	  like '%'||#{search}||'%'
	</sql>
	
	<!-- 전체 글의 개수 구하기 -->
	<select id="memberCount" parameterType="Pager" resultType="Long">
		select count(id) from member 
		<where>
			<if test="kind == 'id'"> id <include refid="search"></include></if>
			<if test="kind == 'name'"> name <include refid="search"></include></if>
			<if test="kind == 'email'"> email <include refid="search"></include></if>
		</where>
	</select>
	
	<select id="memberList" parameterType="Pager" resultType="MemberVO">
		select * from
			(select N.*, rownum R from
				(select * from member where 
				<choose>
					<when test="kind == 'email'"> email </when>
					<when test="kind == 'name'"> name </when>
					<otherwise> id </otherwise>
				</choose>
				like '%'||#{search}||'%') N)
		where R between #{startRow} and #{lastRow}
	</select>
	
	
	<select id="memberLogin" parameterType="MemberVO" resultMap="loginResult">
		Select M.*, F.fileName, F.oriName    
		from member M left join memberFile F
		on (M.id = F.id)
		where M.id = #{id} and M.pw=#{pw}
	</select>
	
	<insert id="memberJoin" parameterType="MemberVO">
		insert into member values(#{id}, #{pw}, #{name}, #{age}, #{email}, #{phone}) 
	</insert>
	
	<select id="memberIdCheck" parameterType="String" resultType="Long">
		select count(id) from member where id=#{id}
	</select>
	
	<delete id="memberDelete" parameterType="String">
		delete member where id=#{id}
	</delete>
	
	<delete id="membersDelete" parameterType="List">
		delete member where id in
		  <foreach collection="list" item="id" open="(" separator="," close=")">
		  	#{id}
		  </foreach>
	</delete>
	
	<update id="memberUpdate" parameterType="MemberVO">
		update member set pw=#{pw}, name=#{name}, age=#{age}, phone=#{phone}, email=#{email} where id=#{id}
	</update>
</mapper>